#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
"""

import json
import sys
import os
from datetime import datetime
from typing import List, Dict, Any

def load_history(file_path: str = "search_quality_history.json") -> List[Dict]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    if os.path.exists(file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return []
    return []

def format_timestamp(timestamp_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç timestamp –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        dt = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    except:
        return timestamp_str

def calculate_improvement(old_value: float, new_value: float) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
    if old_value == 0:
        return "N/A"
    
    improvement = ((new_value - old_value) / old_value) * 100
    if improvement > 0:
        return f"+{improvement:.1f}%"
    else:
        return f"{improvement:.1f}%"

def compare_metrics(old_metrics: Dict, new_metrics: Dict) -> Dict:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ—Ä—Å–∏—è–º–∏"""
    comparison = {}
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    basic_metrics = ['pass_rate', 'avg_score', 'avg_composite_score', 'avg_execution_time']
    for metric in basic_metrics:
        old_val = old_metrics.get(metric, 0)
        new_val = new_metrics.get(metric, 0)
        comparison[metric] = {
            'old': old_val,
            'new': new_val,
            'change': calculate_improvement(old_val, new_val)
        }
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    if 'aggregated_metrics' in old_metrics and 'aggregated_metrics' in new_metrics:
        old_agg = old_metrics['aggregated_metrics']
        new_agg = new_metrics['aggregated_metrics']
        
        advanced_metrics = ['precision_at_5', 'ndcg_at_5', 'mrr', 'title_match_score', 'diversity_score', 'speed_score']
        for metric in advanced_metrics:
            old_val = old_agg.get(metric, 0)
            new_val = new_agg.get(metric, 0)
            comparison[f'adv_{metric}'] = {
                'old': old_val,
                'new': new_val,
                'change': calculate_improvement(old_val, new_val)
            }
    
    return comparison

def print_comparison_report(history: List[Dict], indices: List[int]):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    if len(indices) != 2:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–æ–≤–Ω–æ 2 –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
    
    old_idx, new_idx = indices
    if old_idx >= len(history) or new_idx >= len(history):
        print(f"‚ùå –ò–Ω–¥–µ–∫—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-{len(history)-1}")
        return
    
    old_result = history[old_idx]
    new_result = history[new_idx]
    
    old_summary = old_result['summary']
    new_summary = new_result['summary']
    
    print("üîÑ –°–†–ê–í–ù–ï–ù–ò–ï –í–ï–†–°–ò–ô –ü–û–ò–°–ö–ê")
    print("=" * 60)
    
    print(f"üìÖ –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è: {format_timestamp(old_result['timestamp'])}")
    print(f"üìÖ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {format_timestamp(new_result['timestamp'])}")
    
    if 'git_commit' in old_result and 'git_commit' in new_result:
        print(f"üîó –ö–æ–º–º–∏—Ç—ã: {old_result['git_commit'][:8]} ‚Üí {new_result['git_commit'][:8]}")
    
    print()
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    comparison = compare_metrics(old_summary, new_summary)
    
    print("üìä –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
    print("-" * 30)
    
    metrics_display = {
        'pass_rate': ('–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è', '%'),
        'avg_score': ('–°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä', '/100'),
        'avg_composite_score': ('–ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —Å–∫–æ—Ä', '/100'),
        'avg_execution_time': ('–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è', '—Å')
    }
    
    for metric, (name, unit) in metrics_display.items():
        if metric in comparison:
            data = comparison[metric]
            change_icon = "üìà" if "+" in data['change'] else "üìâ" if "-" in data['change'] else "‚û°Ô∏è"
            print(f"{change_icon} {name}: {data['old']:.2f}{unit} ‚Üí {data['new']:.2f}{unit} ({data['change']})")
    
    print("\nüéØ –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
    print("-" * 30)
    
    advanced_display = {
        'adv_precision_at_5': ('Precision@5', ''),
        'adv_ndcg_at_5': ('NDCG@5', ''),
        'adv_mrr': ('MRR', ''),
        'adv_title_match_score': ('Title Match', ''),
        'adv_diversity_score': ('Diversity', ''),
        'adv_speed_score': ('Speed', '')
    }
    
    for metric, (name, unit) in advanced_display.items():
        if metric in comparison:
            data = comparison[metric]
            change_icon = "üìà" if "+" in data['change'] else "üìâ" if "-" in data['change'] else "‚û°Ô∏è"
            print(f"{change_icon} {name}: {data['old']:.3f}{unit} ‚Üí {data['new']:.3f}{unit} ({data['change']})")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    print("\nüìÇ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
    print("-" * 30)
    
    old_cats = old_summary.get('category_stats', {})
    new_cats = new_summary.get('category_stats', {})
    
    all_categories = set(old_cats.keys()) | set(new_cats.keys())
    for category in sorted(all_categories):
        old_rate = old_cats.get(category, {}).get('pass_rate', 0)
        new_rate = new_cats.get(category, {}).get('pass_rate', 0)
        change = calculate_improvement(old_rate, new_rate)
        change_icon = "üìà" if "+" in change else "üìâ" if "-" in change else "‚û°Ô∏è"
        print(f"{change_icon} {category}: {old_rate:.1f}% ‚Üí {new_rate:.1f}% ({change})")
    
    # –û–±—â–∏–π –≤—ã–≤–æ–¥
    print("\nüéØ –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó:")
    print("-" * 30)
    
    improvements = 0
    degradations = 0
    
    for metric_data in comparison.values():
        if "+" in metric_data['change']:
            improvements += 1
        elif "-" in metric_data['change']:
            degradations += 1
    
    if improvements > degradations:
        print("‚úÖ –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞")
    elif degradations > improvements:
        print("‚ö†Ô∏è –û–±—â–µ–µ —É—Ö—É–¥—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞")
    else:
        print("‚û°Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ")
    
    print(f"üìà –£–ª—É—á—à–µ–Ω–∏–π: {improvements}")
    print(f"üìâ –£—Ö—É–¥—à–µ–Ω–∏–π: {degradations}")

def print_history_list(history: List[Dict]):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
    print("üìã –ò–°–¢–û–†–ò–Ø –¢–ï–°–¢–û–í:")
    print("=" * 60)
    
    for i, result in enumerate(history):
        timestamp = format_timestamp(result['timestamp'])
        summary = result['summary']
        pass_rate = summary.get('pass_rate', 0)
        avg_score = summary.get('avg_composite_score', summary.get('avg_score', 0))
        
        commit = result.get('git_commit', 'unknown')[:8]
        branch = result.get('branch', 'unknown')
        
        status_icon = "‚úÖ" if pass_rate >= 80 else "‚ö†Ô∏è" if pass_rate >= 70 else "‚ùå"
        
        print(f"{i:2d}. {status_icon} {timestamp} | {pass_rate:.1f}% | {avg_score:.1f} | {commit} ({branch})")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python compare_search_versions.py list                    # –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        print("  python compare_search_versions.py compare <old_idx> <new_idx>  # —Å—Ä–∞–≤–Ω–∏—Ç—å –≤–µ—Ä—Å–∏–∏")
        print("–ü—Ä–∏–º–µ—Ä: python compare_search_versions.py compare 0 1")
        return 1
    
    history = load_history()
    if not history:
        print("‚ùå –§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç")
        return 1
    
    command = sys.argv[1]
    
    if command == "list":
        print_history_list(history)
    elif command == "compare":
        if len(sys.argv) != 4:
            print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã compare –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å 2 –∏–Ω–¥–µ–∫—Å–∞")
            print("–ü—Ä–∏–º–µ—Ä: python compare_search_versions.py compare 0 1")
            return 1
        
        try:
            old_idx = int(sys.argv[2])
            new_idx = int(sys.argv[3])
            print_comparison_report(history, [old_idx, new_idx])
        except ValueError:
            print("‚ùå –ò–Ω–¥–µ–∫—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
            return 1
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())

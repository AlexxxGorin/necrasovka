#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞ –≤ CI/CD
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏
"""

import asyncio
import json
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

from app.search_tests import run_search_tests

RESULTS_FILE = "search_quality_history.json"

def load_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
    if os.path.exists(RESULTS_FILE):
        try:
            with open(RESULTS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return []
    return []

def save_result(summary):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    history = load_history()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    result = {
        "timestamp": datetime.now().isoformat(),
        "git_commit": os.environ.get("GIT_COMMIT", "unknown"),
        "branch": os.environ.get("GIT_BRANCH", "unknown"),
        "summary": summary
    }
    
    history.append(result)
    
    # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    history = history[-50:]
    
    with open(RESULTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(history, f, indent=2, ensure_ascii=False)

def analyze_trends(history):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞"""
    if len(history) < 2:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤"
    
    current = history[-1]["summary"]
    previous = history[-2]["summary"]
    
    pass_rate_change = current["pass_rate"] - previous["pass_rate"]
    score_change = current["avg_score"] - previous["avg_score"]
    
    trend_msg = []
    
    if pass_rate_change > 0:
        trend_msg.append(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—ã—Ä–æ—Å –Ω–∞ {pass_rate_change:.1f}%")
    elif pass_rate_change < 0:
        trend_msg.append(f"üìâ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É–ø–∞–ª –Ω–∞ {abs(pass_rate_change):.1f}%")
    else:
        trend_msg.append("‚û°Ô∏è –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
    
    if score_change > 0:
        trend_msg.append(f"üìà –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä –≤—ã—Ä–æ—Å –Ω–∞ {score_change:.1f}")
    elif score_change < 0:
        trend_msg.append(f"üìâ –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä —É–ø–∞–ª –Ω–∞ {abs(score_change):.1f}")
    else:
        trend_msg.append("‚û°Ô∏è –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
    
    return "; ".join(trend_msg)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        summary = await run_search_tests()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
        history = load_history()
        if history:
            trends = analyze_trends(history)
            print(f"\nüìä –¢—Ä–µ–Ω–¥—ã: {trends}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        save_result(summary)
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è CI/CD
        print(f"\nüìã –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {summary['passed_tests']}/{summary['total_tests']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {summary['pass_rate']:.1f}%")
        print(f"   –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä: {summary['avg_score']:.1f}/100")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        if summary['pass_rate'] >= 80:
            print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞ –æ—Ç–ª–∏—á–Ω–æ–µ!")
            return 0
        elif summary['pass_rate'] >= 70:
            print("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞ —Ö–æ—Ä–æ—à–µ–µ, –Ω–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
            return 0
        elif summary['pass_rate'] >= 50:
            print("‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ, —Ç—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è")
            return 1
        else:
            print("‚ùå –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞ –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ!")
            return 2
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
        return 3

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)

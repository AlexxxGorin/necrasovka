#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python analyze_query.py "–≤–∞—à –∑–∞–ø—Ä–æ—Å"
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'app'))

from app.search_tests import SearchQualityTester
from app.search_metrics import format_metrics_report

async def analyze_single_query(query: str, expected_titles: list = None):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    if expected_titles is None:
        expected_titles = []
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
    print("=" * 60)
    
    tester = SearchQualityTester()
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results, execution_time = await tester.run_search(query)
        
        if not results:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.3f}—Å")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("üéØ –¢–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for i, result in enumerate(results[:10], 1):
            title = result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            score = result.get('score', 0)
            matched_by = result.get('matched_by', 'unknown')
            path_index = result.get('path_index', 'unknown')
            
            print(f"   {i:2d}. {title[:80]}")
            print(f"       –°–∫–æ—Ä: {score:.1f} | –¢–∏–ø: {matched_by} | –ò—Å—Ç–æ—á–Ω–∏–∫: {path_index}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º highlights –µ—Å–ª–∏ –µ—Å—Ç—å
            highlight = result.get('highlight', {})
            if highlight:
                for field, highlights in highlight.items():
                    if highlights:
                        snippet = highlights[0][:100] + "..." if len(highlights[0]) > 100 else highlights[0]
                        print(f"       {field}: {snippet}")
            print()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –≤—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if expected_titles:
            print("üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
            print("-" * 30)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            advanced_metrics = tester.evaluator.evaluate_search_quality(
                query=query,
                results=results,
                expected_titles=expected_titles,
                execution_time=execution_time
            )
            
            # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
            report = format_metrics_report(advanced_metrics, query)
            print(report)
            
            composite_score = tester.evaluator.calculate_composite_score(advanced_metrics)
            print(f"\nüéØ –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —Å–∫–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞: {composite_score:.1f}/100")
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print(f"\nüîé –ê–Ω–∞–ª–∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
            for expected in expected_titles:
                found = False
                for i, result in enumerate(results[:20], 1):
                    title = result.get('title', '').lower()
                    book_name = result.get('book_name', '').lower()
                    
                    if (expected.lower() in title or expected.lower() in book_name or
                        any(word in title or word in book_name for word in expected.lower().split() if len(word) > 3)):
                        print(f"   ‚úÖ '{expected}' –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i}")
                        found = True
                        break
                
                if not found:
                    print(f"   ‚ùå '{expected}' –ù–ï –ù–ê–ô–î–ï–ù –≤ —Ç–æ–ø-20")
        
        else:
            print("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –î–æ–±–∞–≤—å—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞")
            print("   –ü—Ä–∏–º–µ—Ä: python analyze_query.py '–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –º–µ—Ç—Ä–æ' '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –º–µ—Ç—Ä–æ,–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–æ'")
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return 1
    
    return 0

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python analyze_query.py '–∑–∞–ø—Ä–æ—Å' ['–æ–∂–∏–¥–∞–µ–º—ã–π1,–æ–∂–∏–¥–∞–µ–º—ã–π2']")
        print("–ü—Ä–∏–º–µ—Ä: python analyze_query.py '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞–º—è—Ç–Ω–∏–∫–∏ –ú–æ—Å–∫–≤—ã'")
        print("–ü—Ä–∏–º–µ—Ä —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:")
        print("  python analyze_query.py '–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –º–µ—Ç—Ä–æ' '–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –º–µ—Ç—Ä–æ,–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–æ'")
        return 1
    
    query = sys.argv[1]
    expected_titles = []
    
    if len(sys.argv) > 2:
        expected_titles = [title.strip() for title in sys.argv[2].split(',')]
    
    return asyncio.run(analyze_single_query(query, expected_titles))

if __name__ == "__main__":
    sys.exit(main())

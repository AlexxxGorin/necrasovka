#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./check-deployment.sh

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[‚ö†]${NC} $1"
}

log_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

ERRORS=0
WARNINGS=0

check_file() {
    if [[ -f "$1" ]]; then
        log_success "–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: $1"
    else
        log_error "–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: $1"
        ERRORS=$((ERRORS + 1))
    fi
}

check_executable() {
    if [[ -x "$1" ]]; then
        log_success "–°–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π: $1"
    else
        log_error "–°–∫—Ä–∏–ø—Ç –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π: $1"
        ERRORS=$((ERRORS + 1))
    fi
}

log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é..."

echo
log_info "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:"
check_file "app/main.py"
check_file "requirements.txt"
check_file "frontend/frontend-necrasovka/package.json"
check_file "frontend/frontend-necrasovka/src/App.jsx"

echo
log_info "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Ñ–∞–π–ª–æ–≤:"
check_file "Dockerfile.backend"
check_file "Dockerfile.frontend"
check_file "docker-compose.prod.yml"
check_file ".dockerignore"
check_file "deploy/nginx.conf"

echo
log_info "‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
check_file "env.prod.template"

if [[ -f ".env" ]]; then
    log_success "–õ–æ–∫–∞–ª—å–Ω—ã–π .env –Ω–∞–π–¥–µ–Ω"
else
    log_warning "–õ–æ–∫–∞–ª—å–Ω—ã–π .env –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–ø–ª–æ—è)"
fi

echo
log_info "üìú –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
check_executable "deploy/deploy.sh"
check_executable "deploy/update.sh"
check_executable "deploy/sync-to-server.sh"
check_executable "deploy/monitor.sh"
check_executable "deploy/setup-monitoring.sh"
check_executable "deploy/full-deploy.sh"
check_executable "deploy/fix-and-deploy.sh"

echo
log_info "üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:"
check_file "DEPLOYMENT.md"
check_file "QUICK_START.md"
check_file "DEPLOYMENT_FIXES.md"
check_file "DEPLOYMENT_SUMMARY.md"

echo
log_info "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python:"
if python -c "import fastapi, uvicorn, opensearchpy" 2>/dev/null; then
    log_success "Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
else
    log_warning "Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è venv)"
fi

echo
log_info "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Node.js:"
if [[ -d "frontend/frontend-necrasovka/node_modules" ]]; then
    log_success "Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    log_warning "Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    WARNINGS=$((WARNINGS + 1))
fi

echo
log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω):"
if command -v docker &> /dev/null; then
    if docker --version &> /dev/null; then
        log_success "Docker –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        log_warning "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        WARNINGS=$((WARNINGS + 1))
    fi
else
    log_warning "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)"
fi

echo
log_info "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç:"
if command -v curl &> /dev/null; then
    log_success "curl –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    log_error "curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    ERRORS=$((ERRORS + 1))
fi

if command -v rsync &> /dev/null; then
    log_success "rsync –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    log_error "rsync –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω—É–∂–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)"
    ERRORS=$((ERRORS + 1))
fi

if command -v ssh &> /dev/null; then
    log_success "ssh –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    log_error "ssh –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É)"
    ERRORS=$((ERRORS + 1))
fi

echo
log_info "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:"
echo "  –û—à–∏–±–∫–∏: $ERRORS"
echo "  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $WARNINGS"

echo
if [[ $ERRORS -eq 0 ]]; then
    log_success "‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!"
    echo
    log_info "üöÄ –î–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
    log_info "  ./deploy/full-deploy.sh 89.169.3.47 root"
    echo
    log_info "üìã –ò–ª–∏ –ø–æ—à–∞–≥–æ–≤–æ:"
    log_info "  1. ./deploy/sync-to-server.sh 89.169.3.47 root"
    log_info "  2. ssh root@89.169.3.47"
    log_info "  3. cd /opt/necrasovka && cp env.prod.template .env.prod"
    log_info "  4. nano .env.prod  # –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"
    log_info "  5. ./deploy/deploy.sh"
    exit 0
else
    log_error "‚ùå –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º."
    exit 1
fi

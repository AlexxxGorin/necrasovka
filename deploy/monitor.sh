#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Necrasovka Search
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./monitor.sh [--status|--logs|--health|--resources]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

PROJECT_DIR="/opt/necrasovka"
DOCKER_COMPOSE_FILE="docker-compose.prod.yml"

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
cd $PROJECT_DIR

show_status() {
    log_info "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    docker-compose -f $DOCKER_COMPOSE_FILE ps
    echo
    
    log_info "üîç –î–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
}

show_logs() {
    log_info "üìù –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫):"
    echo "=== BACKEND LOGS ==="
    docker-compose -f $DOCKER_COMPOSE_FILE logs --tail=50 backend
    echo
    echo "=== FRONTEND LOGS ==="
    docker-compose -f $DOCKER_COMPOSE_FILE logs --tail=50 frontend
}

check_health() {
    log_info "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤:"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
    if curl -f -s http://localhost/health > /dev/null; then
        log_success "‚úÖ Backend: Healthy"
    else
        log_error "‚ùå Backend: Unhealthy"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
    if curl -f -s http://localhost/ > /dev/null; then
        log_success "‚úÖ Frontend: Healthy"
    else
        log_error "‚ùå Frontend: Unhealthy"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    backend_status=$(docker inspect necrasovka-backend --format='{{.State.Health.Status}}' 2>/dev/null || echo "unknown")
    frontend_status=$(docker inspect necrasovka-frontend --format='{{.State.Health.Status}}' 2>/dev/null || echo "unknown")
    
    echo
    log_info "Docker Health Status:"
    echo "  Backend: $backend_status"
    echo "  Frontend: $frontend_status"
}

show_resources() {
    log_info "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
    
    echo "=== SYSTEM RESOURCES ==="
    echo "CPU Usage:"
    top -bn1 | grep "Cpu(s)" | awk '{print $2 $3 $4 $5}'
    
    echo
    echo "Memory Usage:"
    free -h
    
    echo
    echo "Disk Usage:"
    df -h /
    
    echo
    echo "=== DOCKER RESOURCES ==="
    docker system df
    
    echo
    echo "=== CONTAINER RESOURCES ==="
    docker stats --no-stream
}

run_search_test() {
    log_info "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:"
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API
    if curl -s "http://localhost/search?index=my-books-index&q=test&search_mode=both" | jq -r '.total.value' > /dev/null 2>&1; then
        log_success "‚úÖ Search API: Working"
    else
        log_error "‚ùå Search API: Failed"
    fi
    
    # –¢–µ—Å—Ç –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if curl -s "http://localhost/test-search" > /dev/null 2>&1; then
        log_success "‚úÖ Test Suite: Available"
    else
        log_warning "‚ö†Ô∏è  Test Suite: Not available"
    fi
}

show_help() {
    echo "Necrasovka Search Monitoring Script"
    echo
    echo "Usage: $0 [OPTION]"
    echo
    echo "Options:"
    echo "  --status      Show service status and container stats"
    echo "  --logs        Show recent logs from all services"
    echo "  --health      Check health of all services"
    echo "  --resources   Show system and Docker resource usage"
    echo "  --test        Run basic functionality tests"
    echo "  --all         Show all monitoring information"
    echo "  --help        Show this help message"
    echo
    echo "If no option is provided, shows basic status information."
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-}" in
    --status)
        show_status
        ;;
    --logs)
        show_logs
        ;;
    --health)
        check_health
        ;;
    --resources)
        show_resources
        ;;
    --test)
        run_search_test
        ;;
    --all)
        show_status
        echo
        check_health
        echo
        show_resources
        echo
        run_search_test
        ;;
    --help)
        show_help
        ;;
    *)
        log_info "üîç Necrasovka Search - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å"
        echo "–í—Ä–µ–º—è: $(date)"
        echo
        show_status
        echo
        check_health
        echo
        log_info "–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $0 --help"
        ;;
esac
